CXX					= /usr/bin/x86_64-w64-mingw32-g++

SDL_ROOT_DIR		= /usr/x86_64-w64-mingw32/bin

CXXFLAGS			= `$(SDL_ROOT_DIR)/sdl2-config --cflags` \
					  -c -g -pedantic -Wall -Wpointer-arith -Wcast-qual -std=c++11

LD					= /usr/bin/x86_64-w64-mingw32-g++
AR					= /usr/bin/x86_64-w64-mingw32-ar
ARFLAGS				= rcs
RM					= rm
CP					= cp
ECHO				= echo
SHELL				= /bin/sh

DEPS				= $(wildcard src/*.h)
OBJDIR				= obj
LIBDIR				= lib

LIBRARY 			= $(LIBDIR)/libflat.dll.a
LIB_SOURCES			= $(wildcard src/*.cpp)
LIB_OBJECTS			= $(addprefix $(OBJDIR)/,$(notdir $(LIB_SOURCES:.cpp=.o32)))

LIB_INCLUDE_DIR		= include/flat
LIB_UNIFIED_INCLUDE	= $(LIB_INCLUDE_DIR)/flat.h
LIB_INCLUDE_SOURCES	= $(wildcard src/*.h)
LIB_INCLUDES		= $(addprefix $(LIB_INCLUDE_DIR)/,$(notdir $(LIB_INCLUDE_SOURCES)))

.PHONY: $(OBJDIR) $(LIBDIR) $(LIB_INCLUDE_DIR) $(LIB_UNIFIED_INCLUDE)

default: $(LIBRARY) $(LIB_INCLUDES) $(LIB_UNIFIED_INCLUDE)

all: $(LIBRARY) $(LIB_UNIFIED_INCLUDE)

$(LIB_INCLUDE_DIR)/%.h: src/%.h
	@$(CP) $< $@

$(LIB_UNIFIED_INCLUDE): $(LIB_INCLUDES)
	@$(ECHO) "#ifndef _FLAT_H" > $(LIB_INCLUDE_DIR)/flat.h
	@$(ECHO) "#define _FLAT_H" >> $(LIB_INCLUDE_DIR)/flat.h
	@$(ECHO) "" >> $(LIB_INCLUDE_DIR)/flat.h
	@for header in $(notdir $(LIB_INCLUDES)); do $(ECHO) "#include <flat/$$header>"; done >> $(LIB_INCLUDE_DIR)/flat.h
	@$(ECHO) "" >> $(LIB_INCLUDE_DIR)/flat.h
	@$(ECHO) "#endif" >> $(LIB_INCLUDE_DIR)/flat.h

$(LIBRARY): $(LIB_OBJECTS) $(DEPS)
	$(AR) $(ARFLAGS) $@ $(LIB_OBJECTS)

$(OBJDIR)/%.o32: src/%.cpp
	$(CXX) $(CXXFLAGS) $< -o $@

clean:
	@$(ECHO) Cleaning project
	@$(RM) -f $(LIBRARY) $(LIB_OBJECTS) $(LIB_INCLUDES)
